openapi: 3.0.3
info:
  title: Ochiga Estate API
  version: "1.0.0"
  description: |
    Core API for Ochiga estate management â€” auth, users, houses, requests, payments, devices, community.
servers:
  - url: https://api.ochiga.example.com
    description: Production
  - url: http://localhost:3000
    description: Local dev

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        fullName:
          type: string
        role:
          type: string
          enum: [resident, manager, staff]
        phone:
          type: string
        createdAt:
          type: string
          format: date-time

    AuthRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'

    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    Estate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string

    House:
      type: object
      properties:
        id:
          type: string
        estateId:
          type: string
        number:
          type: string
        ownerId:
          type: string
        status:
          type: string
          enum: [occupied, vacant]
        balance:
          type: integer
        createdAt:
          type: string
          format: date-time

    Request:
      type: object
      properties:
        id:
          type: string
        houseId:
          type: string
        userId:
          type: string
        category:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, resolved, cancelled]
        assignedTo:
          type: string
        createdAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        estateId:
          type: string
        amount:
          type: integer
        currency:
          type: string
        status:
          type: string
          enum: [pending, paid, failed]
        externalRef:
          type: string
        createdAt:
          type: string
          format: date-time

    InvoiceCreate:
      type: object
      required: [userId, amount, description]
      properties:
        userId:
          type: string
        amount:
          type: integer
        currency:
          type: string
          default: NGN
        description:
          type: string

    Device:
      type: object
      properties:
        id:
          type: string
        estateId:
          type: string
        name:
          type: string
        type:
          type: string
        topic:
          type: string
        meta:
          type: object
        state:
          type: object
        createdAt:
          type: string
          format: date-time

    DeviceCommand:
      type: object
      required: [action]
      properties:
        action:
          type: string
          enum: [on, off, set, toggle]
        payload:
          type: object
        requestId:
          type: string

    Post:
      type: object
      properties:
        id:
          type: string
        authorId:
          type: string
        estateId:
          type: string
        content:
          type: string
        imageUrl:
          type: string
        videoUrl:
          type: string
        pinned:
          type: boolean
        allowComments:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: string
        postId:
          type: string
        authorId:
          type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: tokens refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Logout (revoke refresh token)
      security:
        - bearerAuth: []
      requestBody:
        required: false
      responses:
        '204':
          description: logged out

  /api/users/me:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/estates:
    get:
      summary: List estates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: estates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Estate'
    post:
      summary: Create estate (manager)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, address]
              properties:
                name: { type: string }
                address: { type: string }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Estate'

  /api/estates/{estateId}/houses:
    parameters:
      - name: estateId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List houses in estate
      security:
        - bearerAuth: []
      responses:
        '200':
          description: houses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/House'

  /api/houses/{houseId}:
    parameters:
      - name: houseId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get house
      security:
        - bearerAuth: []
      responses:
        '200':
          description: house
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
    put:
      summary: Update house
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
                balance: { type: integer }
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'

  /api/requests:
    post:
      summary: Create maintenance/request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [houseId, category, description]
              properties:
                houseId: { type: string }
                category: { type: string }
                description: { type: string }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
    get:
      summary: List requests (filter with query)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
      responses:
        '200':
          description: requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'

  /api/requests/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Update request (status, assigned)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
                assignedTo: { type: string }
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'

  /api/payments/invoice:
    post:
      summary: Create invoice / start payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreate'
      responses:
        '201':
          description: invoice created (include paymentUrl)
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoiceId: { type: string }
                  paymentUrl: { type: string }
                  expiresAt: { type: string, format: date-time }

  /api/payments/webhook:
    post:
      summary: Payment gateway webhook (public endpoint)
      requestBody:
        required: true
      responses:
        '204':
          description: webhook received

  /api/devices:
    get:
      summary: List devices (optionally by estateId query)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: estateId
          schema: { type: string }
      responses:
        '200':
          description: devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      summary: Register device (manager)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [estateId, name, type, topic]
              properties:
                estateId: { type: string }
                name: { type: string }
                type: { type: string }
                topic: { type: string }
                meta: { type: object }
      responses:
        '201':
          description: device created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'

  /api/devices/{deviceId}/action:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Send command to device (publishes to MQTT)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceCommand'
      responses:
        '202':
          description: accepted (command queued/published)
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId: { type: string }

  /api/estates/{estateId}/posts:
    parameters:
      - name: estateId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List posts for estate (pinned first)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [estateId, content]
              properties:
                estateId: { type: string }
                content: { type: string }
                imageUrl: { type: string }
                videoUrl: { type: string }
                pinned: { type: boolean }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /api/posts/{postId}/comments:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Add comment to post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text: { type: string }
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

tags:
  - name: auth
  - name: users
  - name: estates
  - name: houses
  - name: requests
  - name: payments
  - name: devices
  - name: community
